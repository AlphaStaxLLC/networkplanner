wb_data_tall$variable <- NULL
View(wb_data_flat)
wb_data_flat <- ldply(scraped_data, function(df) { df[[year]]}) # unfortunately, ldply uses an rbind at the end, so our data is flipped around
View(wb_data_flat)
wb_data_tall <- melt(wb_data_flat, id.vars='.id', value.name=year) # flip the data.frame
View(wb_data_flat)
View(wb_data_tall)
wb_data_tall <- melt(wb_data_flat, id.vars='.id', value.name=year) # flip the data.frame
wb_data_tall <- cbind(scraped_data$AGO[,c("Indicator.Name","Indicator.Code")], wb_data_tall) # bring in indicator name and code
wb_data_tall <- melt(wb_data_flat, id.vars='.id', value.name=year) # flip the data.frame
View(wb_data_tall)
wb_data_tall <- cbind(scraped_data$AGO[,c("Indicator.Name","Indicator.Code")], wb_data_tall) # bring in indicator name and code
View(wb_data_tall)
wb_data_tall$variable <- NULL
View(wb_data_tall)
View(wb.data)
View(wb_data_tall)
View(wb.data)
wb_data <- ddply(wb_data_tall, .id)
wb_data <- ddply(wb_data_tall, ".id")
View(wb_data)
wb_data <- ddply(wb_data_tall, "Indicator.Name")
View(wb_data)
wb_data <- ddply(wb_data_tall, .Indicator.Name)
wb_data <- ddply(wb_data_tall, .id)
wb_data <- ddply(wb_data_tall, .".id")
wb_data <- ddply(wb_data_tall, ."Indicator.Name")
wb_data_flat <- ldply(scraped_data, function(df) { df[[year]]}) # unfortunately, ldply uses an rbind at the end, so our data is flipped around
wb_data_tall <- melt(wb_data_flat, id.vars='.id', value.name=year) # flip the data.frame
wb_data_tall <- cbind(scraped_data$AGO[,c("Indicator.Name","Indicator.Code")], wb_data_tall) # bring in indicator name and code
wb_data_tall$variable <- NULL
View(wb_data_tall)
wb_data <- ddply(wb_data_tall, .(Indicator.Name))
View(wb_data)
wb_data <- ddply(wb_data_tall, .(.id))
View(wb_data)
wb_data <- ddply(wb_data_tall, .(Indicator.Name))
View(wb_data)
wb_data <- ddply(wb_data_tall, .(.id))
View(wb_data)
View(wb_data_tall)
wb_data <- ddply(wb_data_tall, .(.id), summarize)
wb_data <- ddply(wb_data_tall, .(.id), summarize, "X2010")
View(wb_data)
wb_data <- ddply(wb_data_tall, .(.id), summarize, year)
View(wb_data)
wb_data <- ddply(wb_data_tall, .(.id), s"X2010")
wb_data <- ddply(wb_data_tall, .(.id), "X2010")
wb_data <- ddply(wb_data_tall, .(.id, Indicator.Name))
View(wb_data)
wb_data <- ddply(wb_data_tall, .(Indicator.Name, .id))
View(wb_data)
wb_data <- ddply(wb_data_tall, .(.id, Indicator.Name))
View(wb_data)
wb_data <- ddply(wb_data_tall, .(.id, Indicator.Name), summarize, X2010)
View(wb_data)
wb_data <- ddply(wb_data_tall, .(Indicator.Name, .id), summarize, X2010)
View(wb_data)
names(airquality) <- tolower(names(airquality))
View(airquality)
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
aqm
x <- scan("cbb_2008_09.txt", what="", sep="\n")
x <- scan("http://www.goldsheet.com/historic/08cbrat.html",
what="", sep="\n")
View(x)
x[74:86]
home <- substring(x, 43, 43)
View(home)
x <- scan("http://www.goldsheet.com/historic/08cbrat.html",
what="", sep="\n")
country_test <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt")
View(country_test)
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt")
View(country_test)
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt")
View(country_test)
View(country_test2)
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt", sep = ",")
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt", sep = ,)
View(country_test2)
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt", header = TRUE, sep = ,)
View(country_test2)
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt", header = TRUE, sep = ",")
View(country_test2)
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt", header = TRUE, sep = ",")
View(country_test2)
View(countries)
countries <- list("AGO" = "Angola",
"BEN" = "Benin",
"BWA" = "Botswana",
"BFA" = "Burkina Faso",
"BDI" = "Burundi",
"CMR" =  "Cameroon",
"CPV" = "Cape Verde",
"CAF" = "Central Africa Republic",
"TCD" = "Chad Republic",
"COM" = "Comoros",
"COG" = "Congo",
"COD" = "Congo Dem Rep",
"CIV" = "Cote de'Ivoire",
"DJI" = "Djibouti",
"ERI" =  "Eritrea",
"ETH" = "Ethiopia",
"GAB" = "Gabon",
"GMB" = "Gambia",
"GHA" = "Ghana",
"GNB" = "Guinea-Bissau",
"KEN" = "Kenya",
"LSO" = "Lesotho",
"LBR" = "Liberia",
"MDG" = "Madagascar",
"MWI" = "Malawi",
"MLI" = "Mali",
"MRT" = "Mauritania",
"MUS" = "Mauritius",
"MOZ" = "Mozambique",
"NAM" = "Nambia",
"NER" = "Niger Republic",
"NGA" = "Nigeria",
"RWA" = "Rwanda",
"STP" = "Sao Tome",
"SEN" = "Senegal",
"SYC" = "Seychelles",
"SLE" = "sierra Leone",
"SOM" = "Somalia",
"ZAF" = "South Africa",
"SSD" = "south Sudan",
"SDN" = "Sudan",
"SWZ"= "Swaziland",
"TZA" = "Tanzania",
"TGO" =  "Togo",
"UGA" = "Uganda",
"ZMB" = "Zambia",
"ZWE" = "Zimbabwe",
#Initially Omitted Countries
"MYT" = "Myayotte",
"GIN" = "Guinea",
"GNQ" = "Equatorial Guinea",
#USA Data
"USA" = "USA"
)
View(countries)
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt", header = TRUE, sep = ",", row.names = TRUE)
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt", header = TRUE, sep = ",")
View(country_test2)
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt", header = TRUE, sep = ",")
View(country_test2)
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt", header = TRUE, sep = ",", row.names)
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt", header = TRUE, sep = ",", row.names="V")
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt", header = TRUE, sep = ",", row.names)
row.names(country_test2)
row.names(country_test2)=country_test2
country_test2
View(country_test2)
View(country_test2[SIV])
View(country_test2['SIV'])
View(country_test2[SIV,])
View(country_test2[USA,])
View(country_test2['USA',])
View(country_test2['GIN',])
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt",
header = TRUE,
sep = ",",
row.names)
country_test2 <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt",
header = TRUE,
sep = ","
)
View(country_test2)
names(countries)
names(country_test2)
rownames(country_test2)
View(rownames(country_test2))
View(names(countries))
countries <- read.delim("~/github/local/AfriGasNet/DataGathering/CountryList.txt",
header = TRUE,
sep = ","
)
setwd("~/github/local/networkplanner/")
mv4 <- read.csv("MV4sample_demand_output.csv")
View(mv4)
mv4_index <- read.csv("mapping_mvmax4.csv", row.names = F)
mv4_index <- read.csv("mapping_mvmax4.csv")
View(mv4_index)
mv5_index <- read.csv("mapping_mvmax5.csv")
MiniGridParams <- subset(mv4_index$, section == "system (mini-grid)")
MiniGridParams <- subset(mv4_index, section == "system (mini-grid)")
View(MiniGridParams)
View(colnames(MiniGridParams))
View(mv4(MiniGridParams$alias))
View(mv4[MiniGridParams$alias])
View(MiniGridParams)
MiniGridParams <- subset(mv4_index, section == "system (mini-grid)")
MiniGridSubset <- mv4[MiniGridParams$alias]
rm(list=ls())
mv4 <- read.csv("MV4sample_demand_output.csv", row.names =F)
mv5 <- read.csv("MV5sample_demand_output.csv", row.names = F)
#also import indexes for each metric model for better subsetting
mv4_index <- read.csv("mapping_mvmax4.csv")
mv5_index <- read.csv("mapping_mvmax5.csv")
mv4 <- read.csv("MV4sample_demand_output.csv")
mv5 <- read.csv("MV5sample_demand_output.csv")
#also import indexes for each metric model for better subsetting
mv4_index <- read.csv("mapping_mvmax4.csv")
mv5_index <- read.csv("mapping_mvmax5.csv")
#Identify parameters associated with MiniGrids
MiniGridParams <- subset(mv4_index, section == "system (mini-grid)")
MiniGridSubset <- mv4[MiniGridParams$alias]
View(MiniGridSubset)
rm(MiniGridSubset)
#Identify parameters associated with MiniGrids
MiniGridParams_mv4 <- subset(mv4_index, section == "system (mini-grid)")
MiniGridSubset_mv4 <- mv4[MiniGridParams_mv4$alias]
#Identify parameters associated with MiniGrids
MiniGridParams_mv5 <- subset(mv5_index, section == "system (mini-grid)")
MiniGridSubset_mv5 <- mv4[MiniGridParams_mv5$alias]
rm(list=ls())
mv4 <- read.csv("MV4sample_demand_output.csv")
mv5 <- read.csv("MV5sample_demand_output.csv")
#also import indexes for each metric model for better subsetting
mv4_index <- read.csv("mapping_mvmax4.csv")
mv5_index <- read.csv("mapping_mvmax5.csv")
#Identify parameters associated with MiniGrids
MG_Params_mv4 <- subset(mv4_index, section == "system (mini-grid)")
MG_Subset_mv4 <- mv4[MG_Params_mv4$alias]
#Identify parameters associated with MiniGrids
MG_Params_mv5 <- subset(mv5_index, section == "system (mini-grid)")
MG_Subset_mv5 <- mv4[MG_Params_mv5$alias]
View(MG_Subset_mv5)
View(MG_Subset_mv4)
View(MG_Params_mv4)
MG_Subset_mv4 <- rename(MG_Subset_mv4, MG_Params_mv4$alias == MG_Params_mv4$class)
View(MG_Params_mv4$alias)
View(MG_Params_mv4$class)
x <- c("a" = 1, "b" = 2, d = 3, 4)
x
x <- rename(x, replace=c("d" = "c"))
x
rename(mtcars, c("disp" = "displacement"))
mtcars
MG_Subset_mv4 <- rename(MG_Subset_mv4, c(MG_Params_mv4$alias == MG_Params_mv4$class))
MG_Subset_mv4 <- rename(MG_Subset_mv4, c(MG_Params_mv4$alias = MG_Params_mv4$class))
MG_Subset_mv4 <- rename(MG_Subset_mv4, replact = c(MG_Params_mv4$alias = MG_Params_mv4$class))
MG_Subset_mv4 <- rename(MG_Subset_mv4, replace = c(MG_Params_mv4$alias = MG_Params_mv4$class))
names(MG_Subset_mv4)[names(MG_Subset_mv4 == MG_Params_mv4$alias)] = MG_Params_mv4$class
names(MG_Subset_mv4) = MG_Params_mv4$class
View(MG_Subset_mv4)
MG_Subset_mv4 <- MG_Subset_mv4[,order(names(MG_Subset_mv4))]
MG_Subset_mv4_new_names <- MG_Params_mv4$class
MG_Subset_mv4_new_names
View(MG_Subset_mv4_new_names)
MG_Subset_mv4_new_names <- MG_Params_mv4[,c(alias, class)]
MG_Subset_mv4_new_names <- MG_Params_mv4[,c("alias", "class")]
View(MG_Subset_mv4_new_names)
MG_Subset_mv4_new_names <- MG_Subset_mv4_new_names[,order(alias)]
MG_Subset_mv4_new_names <- MG_Subset_mv4_new_names[,order("alias")]
View(MG_Subset_mv4_new_names)
MG_Subset_mv4_new_names <- MG_Params_mv4[,c("alias", "class")]
View(MG_Subset_mv4_new_names)
MG_Subset_mv4_new_names <- MG_Subset_mv4_new_names[,order("alias")]
View(MG_Subset_mv4_new_names)
MG_Subset_mv4_new_names <- MG_Subset_mv4_new_names[order("alias"),]
MG_Subset_mv4_new_names <- MG_Subset_mv4_new_names[order("alias")]
View(MG_Subset_mv4_new_names)
MG_Subset_mv4_new_names <- MG_Subset_mv4_new_names[order("alias"),]
new_names <- MG_Params_mv4[,c("alias", "class")]
new_names <- MG_Subset_mv4_new_names[order(new_names$alias),]
new_names <- MG_Params_mv4[,c("alias", "class")]
new_names <- MG_Subset_mv4_new_names[order(new_names$alias),]
new_names <- new_names[order(new_names$alias),]
View(new_names)
names(MG_Subset_mv4) = new_names$class
View(MG_Subset_mv4)
setwd("~/github/local/networkplanner/")
mv4 <- read.csv("MV4sample_demand_output.csv")
mv5 <- read.csv("MV5sample_demand_output.csv")
#also import indexes for each metric model for better subsetting
mv4_index <- read.csv("mapping_mvmax4.csv")
mv5_index <- read.csv("mapping_mvmax5.csv")
#Identify parameters associated with MiniGrids
MG_Params_mv4 <- subset(mv4_index, section == "system (mini-grid)")
MG_Subset_mv4 <- mv4[MG_Params_mv4$alias]
#Identify parameters associated with MiniGrids
MG_Params_mv5 <- subset(mv5_index, section == "system (mini-grid)")
MG_Subset_mv5 <- mv4[MG_Params_mv5$alias]
##Change names so i can interpret them
#ensure dataframes are in similar order
MG_Subset_mv4 <- MG_Subset_mv4[,order(names(MG_Subset_mv4))]
new_names <- MG_Params_mv4[,c("alias", "class")]
new_names <- new_names[order(new_names$alias),]
names(MG_Subset_mv4) = new_names$class
View(MG_Subset_mv4)
View(MG_Subset_mv5)
MG_Subset_mv4 <- rename(MG_Subset_mv4, replace = c(MG_Params_mv4$alias = MG_Params_mv4$class))
names(MG_Subset_mv4) = new_names$class
View(MG_Subset_mv5)
View(MG_Subset_mv4)
##Change names so i can interpret them for 5
#ensure dataframes are in similar order
MG_Subset_mv5 <- MG_Subset_mv5[,order(names(MG_Subset_mv5))]
new_names5 <- MG_Params_mv5[,c("alias", "class")]
new_names5 <- new_names5[order(new_names5$alias),]
#assign the corresponding class name to replace the alias
names(MG_Subset_mv5) = new_names5$class
View(MG_Subset_mv5)
mv5 <- read.csv("MV5sample_demand_output_updated1216.csv.csv")
mv5_update <- read.csv("MV5sample_demand_output_updated1216.csv")
View(mv5_update)
View(mv5)
View(mv4)
View(mv5)
View(c(mv5$mg_nod_lev, mv4$mg_nod_lev))
View(mv5$mg_nod_lev)
View(mv4$mg_nod_lev)
View(mv4[mg_nod_lev])
View(mv4[mg_nod_lev,])
View(mv4(mg_nod_lev,))
View(mv4(,mg_nod_lev))
View(mv4[,mg_nod_lev])
View(mv4[,"mg_nod_lev"])
View(mv4[,"Name","mg_nod_lev"])
View(mv4[,c("Name","mg_nod_lev")])
View(mv5[,c("Name","mg_nod_lev")])
mv5_update <- read.csv("MV5sample_demand_output_updated1216V2.csv")
View(mv5_update[,c("Name","mg_nod_lev")])
sample_nodes <- read.csv("test_data/sample_demand_nodes.csv")
View(sample_nodes)
sample_nodes$Population <- sample_nodes$Population*1000
write.csv(sample_nodes, "test_data/sample_demand_nodes_lrg_population.csv"))
write.csv(sample_nodes, "test_data/sample_demand_nodes_lrg_population.csv")
mv4_update <- read.csv("MV5sample_demand_output_updated1216V2.csv")
mv4_update <- read.csv("MV4sample_demand_output_updated1216V2.csv")
mv5_update <- read.csv("MV5sample_demand_output_updated1216V2.csv")
View(mv5_update)
View(mv5_update[,c("Name","mg_nod_lev")])
View(mv4_update[,c("Name","mg_nod_lev")])
View(mv4_update[,c("Name","mg_nod_d","mg_nod_lev")])
View(mv5_update[,c("Name","mg_nod_d","mg_nod_lev")])
View(mv5_update[,c("Name","p_dem","mg_nod_d","mg_nod_lev")])
View(mv4_update[,c("Name","p_dem","mg_nod_d","mg_nod_lev")])
View(mv4_update[,c("Name","p_dem","mg_ini","mg_nod_d","mg_nod_lev")])
View(mv4_update[,c("Name","p_dem","mg_ini","mg_rec","mg_nod_d","mg_nod_lev")])
View(mv5_update[,c("Name","p_dem","mg_ini","mg_rec","mg_nod_d","mg_nod_lev")])
mv4_update$dcff
mv5_update$dcff
184011275-53580462
184011275/53580462
mv4 <- read.csv("MV4sample_demand_output_updated1216V2.csv")
mv5 <- read.csv("MV5sample_demand_output_updated1216V2.csv")
mv5_index <- read.csv("mapping_mvmax5.csv")
MG_Params_mv4 <- subset(mv4_index, section == "system (mini-grid)")
MG_Subset_mv4 <- mv4[MG_Params_mv4$alias]
MG_Params_mv5 <- subset(mv5_index, section == "system (mini-grid)")
MG_Subset_mv5 <- mv4[MG_Params_mv5$alias]
View(MG_Subset_mv5)
View(MG_Subset_mv4)
View(mv4_index)
MG_Params_mv4 <- subset(mv4_index, section == "system (mini-grid)")
mv4_index <- read.csv("mapping_mvmax4.csv")
mv5_index <- read.csv("mapping_mvmax5.csv")
#Identify parameters associated with MiniGrids
MG_Params_mv4 <- subset(mv4_index, section == "system (mini-grid)")
MG_Subset_mv4 <- mv4[MG_Params_mv4$alias]
#Identify parameters associated with MiniGrids
MG_Params_mv5 <- subset(mv5_index, section == "system (mini-grid)")
MG_Subset_mv5 <- mv4[MG_Params_mv5$alias]
View(mv4_index)
View(MG_Subset_mv4)
MG_Params_mv4
View(MG_Params_mv4)
View(mv4[MG_Params_mv5$alias])
MG_Subset_mv5 <- mv4[MG_Params_mv5$alias,]
View(MG_Subset_mv5)
MG_Subset_mv5 <- mv5[, which(names(mv5) %in% MG_Params_mv5$alias)]
View(MG_Subset_mv5)
View(MG_Subset_mv4)
MG_Subset_mv4 <- mv4[, which(names(mv4) %in% MG_Params_mv4$alias)]
View(MG_Subset_mv4)
View(mv4_index)
MG_Subset_mv4 <- mv4[, c(p_pkdem, p_dem, which(names(mv4) %in% (MG_Params_mv4$alias))]
MG_Subset_mv4 <- mv4[, c(p_pkdem, p_dem, which(names(mv4) %in% (MG_Params_mv4$alias)))]
MG_Subset_mv4 <- mv4[, c("p_pkdem", "p_dem", which(names(mv4) %in% (MG_Params_mv4$alias)))]
MG_Subset_mv4 <- mv4[, c("p_pkdem", "p_dem"])
MG_Subset_mv4 <- mv4[, c("p_pkdem", "p_dem")]
MG_Subset_mv4 <- mv4[, c("p_pkdem", "p_dem") & which(names(mv4) %in% (MG_Params_mv4$alias)))]
MG_Params_mv4 <- subset(mv4_index, (section == "system (mini-grid)" |
alias == "p_pkdem"))
MG_Params_mv4 <- subset(mv4_index, (section == "system (mini-grid)" |
alias == c("p_pkdem", "p_dem")))
MG_Params_mv4 <- subset(mv4_index, (section == "system (mini-grid)" |
alias == "p_pkdem"))
MG_Params_mv4 <- subset(mv4_index, (section == "system (mini-grid)" |
alias == "p_pkdem" |
alias == "p_dem"
))
MG_Subset_mv4 <- mv4[, which(names(mv4) %in% MG_Params_mv4$alias)]
View(MG_Subset_mv4)
MG_Params_mv5 <- subset(mv5_index, (section == "system (mini-grid)" |
alias == "p_pkdem" |
alias == "p_dem"))
MG_Subset_mv5 <- mv5[, which(names(mv5) %in% MG_Params_mv5$alias)]
View(MG_Subset_mv5)
View(MG_Subset_mv4$p_dem*.4/1460)
.4/1460
*365
.4/1460*365
9.153025e+05*365
9.153025e+05/365
9.153025e+05/197705.333
197705.333/9.153025e+05
197705.333(.9)
197705.333/(.9)
197705.333/(.9)/365
197705.333/(.9)*24
9.153025e+05/219672.6
219672.6/9.153025e+05
> 219672.6*.24
> 219672.6*0.24
219672.6*0.24
0.24/219672.6
24/219672.6
219672.6/0.24
721624465*0.4/1460
197705.333/0.9
721624465/(0.9)
801804961/1.0/(365*24)/(0.1)
801804961/1.0/(365*24)*(0.1)
721624465/.9
9.153025e+05
219672.592/801804961
801804961/219672.592
721624465/(0.9)/1.0/365*.1
mv5 <- read.csv("MV5sample_demand_output_updated1216V2.csv")
mv5_index <- read.csv("mapping_mvmax5.csv")
MG_Params_mv4 <- subset(mv4_index, (section == "system (mini-grid)" |
alias == "p_pkdem" |
alias == "p_dem"
))
View(MG_Subset_mv5)
mv5 <- read.csv("MV5sample_demand_output_updated1216V2.csv")
mv5_index <- read.csv("mapping_mvmax5.csv")
mv5 <- read.csv("MV5sample_demand_output_updated1216V2.csv")
mv5_index <- read.csv("mapping_mvmax5.csv")
MG_Params_mv5 <- subset(mv5_index, (section == "system (mini-grid)" |
alias == "p_pkdem" |
alias == "p_dem"))
MG_Subset_mv5 <- mv5[, which(names(mv5) %in% MG_Params_mv5$alias)]
View(MG_Subset_mv5)
View(mv5)
mv5 <- read.csv("MV5sample_demand_output_updated1216V2.csv")
View(mv5)
View(mv4)
mv4 <- read.csv("MV4sample_demand_output_updated1216V2.csv", row.names = F)
mv5 <- read.csv("MV5sample_demand_output_updated1216V2.csv")
View(mv5)
mv5_index <- read.csv("mapping_mvmax5.csv")
View(mv5_index)
rm(list=ls())
setwd("~/github/local/networkplanner/")
mv4 <- read.csv("MV4sample_demand_output_updated1216V2.csv")
mv5 <- read.csv("MV5sample_demand_output_updated1216V2.csv")
View(mv5)
mv5
mv4_index <- read.csv("mapping_mvmax4.csv")
mv5_index <- read.csv("mapping_mvmax5.csv")
MG_Params_mv4 <- subset(mv4_index, (section == "system (mini-grid)" |
alias == "p_pkdem" |
alias == "p_dem"
))
MG_Subset_mv4 <- mv4[, which(names(mv4) %in% MG_Params_mv4$alias)]
MG_Params_mv5 <- subset(mv5_index, (section == "system (mini-grid)" |
alias == "p_pkdem" |
alias == "p_dem"))
MG_Subset_mv5 <- mv5[, which(names(mv5) %in% MG_Params_mv5$alias)]
View(MG_Subset_mv5)
MG_Subset_mv5$mg_dg_dcp
MG_Subset_mv4$mg_dg_dcp
MG_Subset_mv4$mg_nod_lev
MG_Subset_mv5$mg_nod_lev
MG_Subset_mv5$mg_ini
MG_Subset_mv4$mg_ini
MG_Subset_mv4$mg_rec
MG_Subset_mv5$mg_rec
440706756/1611341999
MG_Subset_mv5$mg_dg_rep
MG_Subset_mv4$mg_dg_rep
MG_Subset_mv4$mg_dg_om
MG_Subset_mv5$mg_dg_om
MG_Subset_mv5$mg_fl
MG_Subset_mv4$mg_fl
432974679/1603609922
MG_Subset_mv4$mg_dg_efhr
MG_Subset_mv5$mg_dg_efhr
MG_Subset_mv5$p_dem*0.54
MG_Subset_mv5$mg_fl
1603609922/389677211
MG_Subset_mv5$p_dem*0.54/(0.9)*1.0
MG_Subset_mv5$mg_fl
View(mv5_index)
(mv5_index)
mv5 <- read.csv("MV5sample_demand_output_updated1216V2.csv")
View(mv5)
mv5$mg_rec
mv5$mg_fl
mv4$mg_fl
1603609922/1611341999
mv4$mg_nod_lev
mv5$mg_nod_lev
mv5$mg_rec
mv4$mg_rec
49368048642/13487488267
